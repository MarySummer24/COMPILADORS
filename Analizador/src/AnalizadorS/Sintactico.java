package AnalizadorL;

import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;

public class Sintactico
{
	Stack<String> pila, pilaaux;
	Vector<String> a = new Vector<String>();
	Vector<String> pi = new Vector<String>();
	int fila=0,col=0,p=0,fa=0,nt=0;
	String Accion,comp,cadprod,error;
	String prodnt[] =   {"P'","P","P","Tipo","Tipo","Tipo","V","V","A","E","E","E","T","T","T","F","F","F"};
	String prod[] =   {"P0","P1",		"P2",	"P3",	"P4","		P5",	"P6",		"P7",	"P8",		"P9",		"P10",		"P11",	"P12",		"P13",		"P14",	"P15",	"P16",	"P17"};
	String prodres[]= {"P",	"Tipo id V","A",	"int",	"float",	"char",	", id V",	"; P",	"id = E ;",	"E + T",	"E - T",	"T",	"T * F",	"T / F",	"F",	"( E )","id",	"num"};
	//String noterminales[] = {"P'","P","Tipo","V","A","E","T","F"};
	String cols[] = 
			{"id",	"num",	"int",	"float",	"char",		",",	";",	"+",	"-",	"*",	"/",	"(",	")",	"=",	"$",	"P",	"Tipo",		"V",	"A",	"E",	"T",	"F"};
	String tabla[][]= {
/*0*/		{"1",	"33",	"4",	"5",		"6",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"1",	"2",		"33",	"33",	"33",	"33",	"33"},
/*1*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P0",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*2*/		{"8",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*3*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P2",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*4*/		{"P3",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*5*/		{"P4",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*6*/		{"P5",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*7*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"9",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*8*/		{"33",	"33",	"33",	"33",		"33",		"11",	"12",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"10",	"33",	"33",	"33",	"33"},
/*9*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"13",	"14",	"15"},
/*10*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P1",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
//			{"id",	"num",	"int",	"float",	"char",		",",	";",	"+",	"-",	"*",	"/",	"(",	")",	"=",	"$",	"P",	"Tipo",		"V",	"A",	"E",	"T",	"F"};
/*11*/		{"19",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*12*/		{"7",	"33",	"4",	"5",		"6",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"20",	"2",		"33",	"3",	"33",	"33",	"33"},
/*13*/		{"33",	"33",	"33",	"33",		"33",		"33",	"21",	"22",	"23",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*14*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P11",	"P11",	"P11",	"24",	"25",	"33",	"P11",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*15*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P14",	"P14",	"P14",	"P14",	"P14",	"33",	"P14",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*16*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"26",	"14",	"15"},
/*17*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P16",	"P16",	"P16",	"P16",	"P16",	"33",	"P16",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*18*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P17",	"P17",	"P17",	"P17",	"P17",	"33",	"P17",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*19*/		{"33",	"33",	"33",	"33",		"33",		"11",	"12",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",		"27",	"33",	"33",	"33",	"33"},
/*20*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P7",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
//			{"id",	"num",	"int",	"float",	"char",		",",	";",	"+",	"-",	"*",	"/",	"(",	")",	"=",	"$",	"P",	"Tipo",		"V",	"A",	"E",	"T",	"F"};
/*21*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P8",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*22*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"28",	"15"},
/*23*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"29",	"15"},
/*24*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"30"},
/*25*/		{"17",	"18",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"16",	"33",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"31"},
/*26*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"22",	"23",	"33",	"33",	"33",	"32",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*27*/		{"33",	"33",	"33",	"33",		"33",		"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"33",	"P6",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*28*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P9",	"P9",	"P9",	"24",	"25",	"33",	"P9",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*29*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P10",	"P10",	"P10",	"24",	"25",	"33",	"P10",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*30*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P12",	"P12",	"P12",	"P12",	"P12",	"33",	"P12",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*31*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P14",	"P13",	"P13",	"P13",	"P13",	"33",	"P13",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"},
/*32*/		{"33",	"33",	"33",	"33",		"33",		"33",	"P15",	"P15",	"P15",	"P15",	"P15",	"33",	"P15",	"33",	"33",	"33",	"33",		"33",	"33",	"33",	"33",	"33"}
	};
	
	public Sintactico() {
		pila = new Stack<String>();
		pila.push("$");
		pila.push("0");
	}
	
	public void ASintactico(String comp) {
		boolean ban=false;
		//Recibe componente
		this.comp = comp;
		//Buscar componete en cols
		for(int i=0; i<cols.length;i++)
			if(comp.equals(cols[i]))
			{
				col=i;
			}
		//Teniendo la col, ahora obtenemos la fila
		fila = Integer.parseInt(pila.peek());
		//Definir acciones
		if(tabla[fila][col].startsWith("P"))
		{
			//Sacar de la pila
			for(int i=0; i<prod.length;i++)
				if(tabla[fila][col].equals(prod[i]))
				{
					if(tabla[fila][col].equals("P0"))
					{
						pila.pop();
						pila.pop();
						pila.pop();
						a.add("Aceptada");
						pi.add(pila+"");
						return;
					}
					else
					{
						cadprod=prodres[i];
						StringTokenizer tokens=new StringTokenizer(cadprod);
						nt = tokens.countTokens();
						//System.out.println("Numero de tokens: "+nt);
						for(int t=1; t<=nt;t++)
						{
							if(t==nt)
								ban=true;
							if(ban)
							{
								a.add(prod[i]+": "+prodnt[i]+" --> "+prodres[i]);
							}
							pila.pop();
							pila.pop();
							if(ban)
							{
							p= Integer.parseInt(pila.peek());
							pila.push(prodnt[i]);
							for(int c=0;c<cols.length;c++)
								if(cols[c].equals(prodnt[i]))
									pila.push(tabla[p][c]);
							pi.add(pila+"");
							//System.out.println(pila);
							}
						}
						ASintactico(comp);
					}
				}
		}
		else if(tabla[fila][col].equals("33"))
		{
			//Error
			pi.add(pila+"");
			a.add("Error");
			error="Error sintactico "+comp+" no esperado, se esperaba :";
			//en esp ingresar lo que se esperaba
			//buscar en el estado donde alla algo doferente a 33
			for(int i=0; i<tabla[Integer.parseInt(pila.peek())].length;i++)
			{
					if(!tabla[Integer.parseInt(pila.peek())][i].equals("33"))
					{
						if(i<14)
						{
								//System.out.println("Entro a busacar");
							error+=" "+cols[i]+" o";
							//System.out.println(error);
						}
					}
			}
			//System.out.println(error.substring(0,error.length()-1));
			//Parar analisis
		}
		else
		{
			//Apilar caracter y estado
			pila.push(comp);
			pila.push(tabla[fila][col]);
			a.add("Des "+comp+" a I"+tabla[fila][col]);
			pi.add(pila+"");
		}
		//System.out.println(pila);
	}
	
	public String Pila() {
		return pila+"";
	}
	public Vector<String> Accion() {
		//System.out.println(a);
		return a;
	}
	
	public Vector<String> Pilas() {
		//System.out.println(a);
		return pi;
	}
	
	public void ReinicarAcciones()
	{
		a = new Vector<String>();
		pi = new Vector<String>();
	}
}